Client / Browser (HTML, CSS, JavaScript) : Data 발생, 서버에게 전송(요청) / Server ( WAS + java => Servlet/JSP, RDBMS)
Servlet/JSP => Spring  /  JDBS => myBaits/JPA - 프레임워크

# HTML - Web Browser에서 사용할 때에는 tag 사용

- html: head - meta, title, ... / body - p, div, form, ...
- 각각의 tag는 속성과 속성의 값이 존재

- class, id: html의 속성

- 주석: 모든  white space는 공백 하나(enter, tab, space) ex) 2-1.html
- 머리글 (heading): 숫자가 커질수록 글자는 작아짐 <h1> ~ <h6> -> <h7> 썼을 때 어떻게 나오는지 한번 확인해보기

- 목록형 요소: ul / ol -> li -> dl -> dt -> dd

- table - HTML table 모델: thead -> tr -> td / tbody -> tr -> td / tfoot ...

- 3-08. html에서 직접 이것저것 해보면서 적용 우선순위도 확인해보기

- 이미지: 상대 경로와 절대 경로 구분하기

- _self / _blank

- 링크 요소 - #anchor / map

  # Form control 요소
  - <form> tag 하위에 위치
  - 속성: method - *GET, POST -> 확실히 구분하기!!(길이 제한 유무, ...) / name / action
~ p.73
___________________________________________________________________________________________________________________________

## WebUI (FrontEnd)
1. html: 웹 구조 (화면 배치)
2. css: 표현 (색상, 스타일 등)
3. javascript: 기능 (이벤트 처리, 기능)
    -- js F/W (js lib) : jquery, bootstrap 등 

## HTML
-- static contents (정적 콘텐츠)
-- tcp/ip, http, html, browser(번역기 역할)(크롬, 엣지, 사파리 등)
-- cross browser : 기본 브라우저 (크롬)
-- html5 / css3: 웹 표준화
  >> html4에서 js가 처리했던 부분이 기본 기능으로 제공됨
  >> 추가 태그, 제거 태그 등
-- html4
-- web service: CS
  >> web client: 브라우저
  >> web servier: VSCode (Live Server), Backend (Tomcat WAS)

## HTML tag
-- block tag
  >> System.out.println("a");
  >> 자동으로 블럭 (라인) 이동
  >> h1~h6, P, ul, ol, div(css)
-- inline tag
  >> System.out.print("a");
  >> 라인 이동 X
  >> img, a(앵커), span(css), 

-- 태그형식: 
1. 내용 있는 태그: <시작>내용</종료>    

2. 내용 없는 태그: empty elemnet
  엔터, 텝 등 화이트스페이스에도 데이터가 들어가기 때문에 유의!
  <시작></종료>
  <시작 />

-- 태그 형식: 
  <시작태그명 속성명 = 속성값 속성명 = "속성값" 속성명 = '속성값'>
  </종류태그명>
  
  => 시작태그명과 종료태그명은 동일해야함
  => 속성은 시작태그명 뒤에 속성명 = 속성값 형식으로 다중
  => 마크드 속성: 속성명 => (html5 표준) 속성명 = '속성값'
  => readOnly = "readOnly"

-- 크기 지정: 높이, 넓이, 이미지, 테이블, 글꼴 등
  >> %: 80%
  >> em: 1em, 0.5em, 0.7em, 1.5em (기본 글꼴 기반 배수 지정)
  >> px: 해상도 기반, 300px, 500px

-- 색상: 글꼴, 백그라운드, 보더라인 등
  >> 색상명: red, blue, ...
  >> RGB: 255, 247, 282
  >> Ox: #223355

## 태그에 부가되는 css 관련 속성
-- id: 해당 html 문서에서 unique (js에서 dom, css 사용)
-- class: 그룹(공통)
-- style: 현재 태그에 css 적용 (간단하게 테스트하는 목적)

## html tag
-- tree 구조
-- root element
  >> child element

## built-in entity
-- 내장 엔티티
-- 특수 문자 처리: &, <, >, ", ', 공백문자
  >> &amp; 
  >> &lt;
  >> &gt;
  >> &apos;
  >> &quot;
  >> &nbsp; => css에서 margin, padding 대체 처리

-- 기본 엔티티 표현 형식: &엔티티명; 
-- <태그> Java & Database</태그>

## 제목태그
-- 블럭태그
-- <h1> ~ <h6>

## 글꼴태그
-- <b>, <strong>: 굵은 글꼴
-- <i>, <em>: 이탤릭 글꼴

## 장애인 차별 금지법
-- 스크린 리더 -> b와 strong 차이

## 테이블 (표 만들기)
-- <table></table>
  >> <caption>테이블제목</caption>
  >> <thead>, <tbody>, <tfoot>: css
  >> <tr>: 행
  >> <td>: 열
  >> <th>: 열(제목) - 굵은 글씨, 가운데 정렬(자동 설정)
-- 속성:
  >> colspan: 열 합치는 숫자, <td>, <th>
  >> rowspan: 행 합치는 숫자, <td>, <th>
  >> width, height, bgcolor 등
  >> border, cell-padding, cell-margin: css

## 클라이언트 => 서버 데이터 전송 방식
1. Query String
  요청url?key=value&key2=value&key3=value3
2. <form> 입력 양식 이용
3. javascript 내장함수: prompt()

## 클라이언트 => 서버 http 요청방식
1. GET 요청 방식:
  - WEB 기본 요청 방식
  - URL 직접 입력
  - <A> 태그
  - javascript: location.href="url"
  - <form method="get">, method 미지정
  
2. POST 요청 방식
  - <form method="POST">
## 서버 http 요청 방식
1. GET 방식
  - Query String 형식으로 url에 첨부되어 전송 
  - 전송 형식: url?key=value&key2=value
  - 길이 제한
  - 보안 이슈 발생
  - 캐싱 가능
  - 보안 관련한 중요 데이터 전송 방식으로 사용해서는 안됨
  - 검색어 입력, 즐겨찾기 등록 요청 시에 주로 사용

2. POST 방식
  - http 메세지 body에 첨부되어 전송
  - 사용자 볼 수 없음, 길이 제한 없음
  - 캐싱 되지 않음
  - 보안 관련 데이터 (로그인, 회원가입), 대량의 데이터 전송 시에 사용
  - <form method="POST"> 지정 시에만 가능한 방식

## 입력양식
-- <form method="GET|POST" action="서버요청처리-url">
-- 입력양식 입력항목
  1. <input type="입력항목형식" name="서버에서사용자입력정보추출위한변수명-form에서 unique">
        id="css위한속성-html페이지 unique" class="css위한속성"
     >
  2. <select name="">: 선택한 항모의 데이터를 전송, 다중 선택도 때에 따라 가능
        <option value="">레이블</option> (레이블과 value가 동일하다면 생략 가능)
        <option value=""></option>
     </select>
  3. <textarea name=""></textarea>

-- 입력항목형식: <input type="입력항목형식">
  >> text: 한 줄 입력 데이터
  >> password: 한 줄 입력 보안 데이터: * 대체 (비밀번호, 주민번호, 카드번호, 휴대폰번호)
  >> radio: 단일 선택 (name="" value="값지정")
  >> checkbox: 다중 선택 (name="" value="값지정")

  >> submit: 요청 전용 버튼 (value="버튼레이블명-로그인") (<form action="url">)
  >> reset: 초기화 전용 버튼 (form 양식을 초기화, 사용자 입력 초기화), (value="버튼레이블명-취소")

  >> button: 버튼 (javascript 이벤트 처리)
  >> image="버튼이미지.png": 이미지를 버튼으로 사용하기 보다는 CSS를 이용해서 버튼 꾸미기

## div와 span 차이점 확인해보기

## 파일 경로 설정: 이미지, css, js 파일
-- 절대경로: https:??ip:port/context-name~
-- 컨텍스트 root 기반 상대경로: /sub-folder/filename.ext
-- 현재 리소스 기반 상대 경로: 
  > 하위폴더: ./sub-folder/filename.ext
  > 상위폴더: ../sub-folder/filename.ext

***
- margin: object와 화면과의 여백(외부 여백) / padding: object 내의 내부 여백



